// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/abronan/part-grpc/api/part/v1/part.proto

/*
	Package part is a generated protocol buffer package.

	It is generated from these files:
		github.com/abronan/part-grpc/api/part/v1/part.proto

	It has these top-level messages:
		Part
		CreatePartRequest
		CreatePartResponse
		CreatePartsRequest
		CreatePartsResponse
		GetPartRequest
		GetPartResponse
		ListPartRequest
		ListPartResponse
		DeletePartRequest
		DeletePartResponse
		UpdatePartRequest
		UpdatePartResponse
		UpdatePartsRequest
		UpdatePartsResponse
*/
package part

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Part struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// @inject_tag: sql:",notnull,default:false"
	Completed bool `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty" sql:",notnull,default:false"`
	// @inject_tag: sql:"type:timestamptz,default:now()"
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty" sql:"type:timestamptz,default:now()"`
	// @inject_tag: sql:"type:timestamptz"
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" sql:"type:timestamptz"`
}

func (m *Part) Reset()                    { *m = Part{} }
func (*Part) ProtoMessage()               {}
func (*Part) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{0} }

type CreatePartRequest struct {
	Item *Part `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *CreatePartRequest) Reset()                    { *m = CreatePartRequest{} }
func (*CreatePartRequest) ProtoMessage()               {}
func (*CreatePartRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{1} }

type CreatePartResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CreatePartResponse) Reset()                    { *m = CreatePartResponse{} }
func (*CreatePartResponse) ProtoMessage()               {}
func (*CreatePartResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{2} }

type CreatePartsRequest struct {
	Items []*Part `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CreatePartsRequest) Reset()                    { *m = CreatePartsRequest{} }
func (*CreatePartsRequest) ProtoMessage()               {}
func (*CreatePartsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{3} }

type CreatePartsResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *CreatePartsResponse) Reset()                    { *m = CreatePartsResponse{} }
func (*CreatePartsResponse) ProtoMessage()               {}
func (*CreatePartsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{4} }

type GetPartRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPartRequest) Reset()                    { *m = GetPartRequest{} }
func (*GetPartRequest) ProtoMessage()               {}
func (*GetPartRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{5} }

type GetPartResponse struct {
	Item *Part `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *GetPartResponse) Reset()                    { *m = GetPartResponse{} }
func (*GetPartResponse) ProtoMessage()               {}
func (*GetPartResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{6} }

type ListPartRequest struct {
	Limit        int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NotCompleted bool  `protobuf:"varint,2,opt,name=not_completed,json=notCompleted,proto3" json:"not_completed,omitempty"`
}

func (m *ListPartRequest) Reset()                    { *m = ListPartRequest{} }
func (*ListPartRequest) ProtoMessage()               {}
func (*ListPartRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{7} }

type ListPartResponse struct {
	Items []*Part `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListPartResponse) Reset()                    { *m = ListPartResponse{} }
func (*ListPartResponse) ProtoMessage()               {}
func (*ListPartResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{8} }

type DeletePartRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeletePartRequest) Reset()                    { *m = DeletePartRequest{} }
func (*DeletePartRequest) ProtoMessage()               {}
func (*DeletePartRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{9} }

type DeletePartResponse struct {
}

func (m *DeletePartResponse) Reset()                    { *m = DeletePartResponse{} }
func (*DeletePartResponse) ProtoMessage()               {}
func (*DeletePartResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{10} }

type UpdatePartRequest struct {
	Item *Part `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *UpdatePartRequest) Reset()                    { *m = UpdatePartRequest{} }
func (*UpdatePartRequest) ProtoMessage()               {}
func (*UpdatePartRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{11} }

type UpdatePartResponse struct {
}

func (m *UpdatePartResponse) Reset()                    { *m = UpdatePartResponse{} }
func (*UpdatePartResponse) ProtoMessage()               {}
func (*UpdatePartResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{12} }

type UpdatePartsRequest struct {
	Items []*Part `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *UpdatePartsRequest) Reset()                    { *m = UpdatePartsRequest{} }
func (*UpdatePartsRequest) ProtoMessage()               {}
func (*UpdatePartsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{13} }

type UpdatePartsResponse struct {
}

func (m *UpdatePartsResponse) Reset()                    { *m = UpdatePartsResponse{} }
func (*UpdatePartsResponse) ProtoMessage()               {}
func (*UpdatePartsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPart, []int{14} }

func init() {
	proto.RegisterType((*Part)(nil), "part.v1.Part")
	proto.RegisterType((*CreatePartRequest)(nil), "part.v1.CreatePartRequest")
	proto.RegisterType((*CreatePartResponse)(nil), "part.v1.CreatePartResponse")
	proto.RegisterType((*CreatePartsRequest)(nil), "part.v1.CreatePartsRequest")
	proto.RegisterType((*CreatePartsResponse)(nil), "part.v1.CreatePartsResponse")
	proto.RegisterType((*GetPartRequest)(nil), "part.v1.GetPartRequest")
	proto.RegisterType((*GetPartResponse)(nil), "part.v1.GetPartResponse")
	proto.RegisterType((*ListPartRequest)(nil), "part.v1.ListPartRequest")
	proto.RegisterType((*ListPartResponse)(nil), "part.v1.ListPartResponse")
	proto.RegisterType((*DeletePartRequest)(nil), "part.v1.DeletePartRequest")
	proto.RegisterType((*DeletePartResponse)(nil), "part.v1.DeletePartResponse")
	proto.RegisterType((*UpdatePartRequest)(nil), "part.v1.UpdatePartRequest")
	proto.RegisterType((*UpdatePartResponse)(nil), "part.v1.UpdatePartResponse")
	proto.RegisterType((*UpdatePartsRequest)(nil), "part.v1.UpdatePartsRequest")
	proto.RegisterType((*UpdatePartsResponse)(nil), "part.v1.UpdatePartsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PartService service

type PartServiceClient interface {
	CreatePart(ctx context.Context, in *CreatePartRequest, opts ...grpc.CallOption) (*CreatePartResponse, error)
	// Bulk version of CreatePart
	CreateParts(ctx context.Context, in *CreatePartsRequest, opts ...grpc.CallOption) (*CreatePartsResponse, error)
	GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error)
	ListPart(ctx context.Context, in *ListPartRequest, opts ...grpc.CallOption) (*ListPartResponse, error)
	DeletePart(ctx context.Context, in *DeletePartRequest, opts ...grpc.CallOption) (*DeletePartResponse, error)
	UpdatePart(ctx context.Context, in *UpdatePartRequest, opts ...grpc.CallOption) (*UpdatePartResponse, error)
	UpdateParts(ctx context.Context, in *UpdatePartsRequest, opts ...grpc.CallOption) (*UpdatePartsResponse, error)
}

type partServiceClient struct {
	cc *grpc.ClientConn
}

func NewPartServiceClient(cc *grpc.ClientConn) PartServiceClient {
	return &partServiceClient{cc}
}

func (c *partServiceClient) CreatePart(ctx context.Context, in *CreatePartRequest, opts ...grpc.CallOption) (*CreatePartResponse, error) {
	out := new(CreatePartResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/CreatePart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) CreateParts(ctx context.Context, in *CreatePartsRequest, opts ...grpc.CallOption) (*CreatePartsResponse, error) {
	out := new(CreatePartsResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/CreateParts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error) {
	out := new(GetPartResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/GetPart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) ListPart(ctx context.Context, in *ListPartRequest, opts ...grpc.CallOption) (*ListPartResponse, error) {
	out := new(ListPartResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/ListPart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) DeletePart(ctx context.Context, in *DeletePartRequest, opts ...grpc.CallOption) (*DeletePartResponse, error) {
	out := new(DeletePartResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/DeletePart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) UpdatePart(ctx context.Context, in *UpdatePartRequest, opts ...grpc.CallOption) (*UpdatePartResponse, error) {
	out := new(UpdatePartResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/UpdatePart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) UpdateParts(ctx context.Context, in *UpdatePartsRequest, opts ...grpc.CallOption) (*UpdatePartsResponse, error) {
	out := new(UpdatePartsResponse)
	err := grpc.Invoke(ctx, "/part.v1.PartService/UpdateParts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PartService service

type PartServiceServer interface {
	CreatePart(context.Context, *CreatePartRequest) (*CreatePartResponse, error)
	// Bulk version of CreatePart
	CreateParts(context.Context, *CreatePartsRequest) (*CreatePartsResponse, error)
	GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error)
	ListPart(context.Context, *ListPartRequest) (*ListPartResponse, error)
	DeletePart(context.Context, *DeletePartRequest) (*DeletePartResponse, error)
	UpdatePart(context.Context, *UpdatePartRequest) (*UpdatePartResponse, error)
	UpdateParts(context.Context, *UpdatePartsRequest) (*UpdatePartsResponse, error)
}

func RegisterPartServiceServer(s *grpc.Server, srv PartServiceServer) {
	s.RegisterService(&_PartService_serviceDesc, srv)
}

func _PartService_CreatePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).CreatePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/CreatePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).CreatePart(ctx, req.(*CreatePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_CreateParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).CreateParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/CreateParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).CreateParts(ctx, req.(*CreatePartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/GetPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).GetPart(ctx, req.(*GetPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_ListPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).ListPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/ListPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).ListPart(ctx, req.(*ListPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_DeletePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).DeletePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/DeletePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).DeletePart(ctx, req.(*DeletePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_UpdatePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).UpdatePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/UpdatePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).UpdatePart(ctx, req.(*UpdatePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_UpdateParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).UpdateParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/part.v1.PartService/UpdateParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).UpdateParts(ctx, req.(*UpdatePartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "part.v1.PartService",
	HandlerType: (*PartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePart",
			Handler:    _PartService_CreatePart_Handler,
		},
		{
			MethodName: "CreateParts",
			Handler:    _PartService_CreateParts_Handler,
		},
		{
			MethodName: "GetPart",
			Handler:    _PartService_GetPart_Handler,
		},
		{
			MethodName: "ListPart",
			Handler:    _PartService_ListPart_Handler,
		},
		{
			MethodName: "DeletePart",
			Handler:    _PartService_DeletePart_Handler,
		},
		{
			MethodName: "UpdatePart",
			Handler:    _PartService_UpdatePart_Handler,
		},
		{
			MethodName: "UpdateParts",
			Handler:    _PartService_UpdateParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/abronan/part-grpc/api/part/v1/part.proto",
}

func (m *Part) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Part) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Completed {
		dAtA[i] = 0x20
		i++
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.CreatedAt.Size()))
		n1, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.UpdatedAt.Size()))
		n2, err := m.UpdatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreatePartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.Item.Size()))
		n3, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreatePartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *CreatePartsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPart(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreatePartsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetPartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetPartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.Item.Size()))
		n4, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ListPartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.Limit))
	}
	if m.NotCompleted {
		dAtA[i] = 0x10
		i++
		if m.NotCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListPartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPart(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeletePartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeletePartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPart(dAtA, i, uint64(m.Item.Size()))
		n5, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UpdatePartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePartsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePartsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPart(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdatePartsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePartsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPart(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Part) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	if m.Completed {
		n += 2
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovPart(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *CreatePartRequest) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *CreatePartResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *CreatePartsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPart(uint64(l))
		}
	}
	return n
}

func (m *CreatePartsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovPart(uint64(l))
		}
	}
	return n
}

func (m *GetPartRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *GetPartResponse) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *ListPartRequest) Size() (n int) {
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovPart(uint64(m.Limit))
	}
	if m.NotCompleted {
		n += 2
	}
	return n
}

func (m *ListPartResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPart(uint64(l))
		}
	}
	return n
}

func (m *DeletePartRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *DeletePartResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdatePartRequest) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPart(uint64(l))
	}
	return n
}

func (m *UpdatePartResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdatePartsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPart(uint64(l))
		}
	}
	return n
}

func (m *UpdatePartsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPart(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPart(x uint64) (n int) {
	return sovPart(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Part) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Part{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartRequest{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartsRequest{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartsResponse{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPartRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPartResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPartResponse{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListPartRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`NotCompleted:` + fmt.Sprintf("%v", this.NotCompleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPartResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListPartResponse{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePartRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePartRequest{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePartResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePartResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePartsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePartsRequest{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Part", "Part", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePartsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePartsResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPart(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Part) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Part: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Part: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &google_protobuf1.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &google_protobuf1.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Part{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Part{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Part{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotCompleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Part{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Part{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePartsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePartsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePartsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPart
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Part{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePartsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePartsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePartsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPart(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPart
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPart
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPart
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPart(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPart = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPart   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/abronan/part-grpc/api/part/v1/part.proto", fileDescriptorPart)
}

var fileDescriptorPart = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xeb, 0x34, 0x69, 0x9b, 0x09, 0x6d, 0xd3, 0x69, 0x0a, 0xc6, 0x54, 0x26, 0xb8, 0x48,
	0x54, 0x95, 0x70, 0xd4, 0x16, 0x81, 0xda, 0x5b, 0x29, 0x12, 0x97, 0x5e, 0x48, 0xcb, 0x05, 0x51,
	0x55, 0x8e, 0xbd, 0x84, 0x15, 0xb1, 0xd7, 0xd8, 0x9b, 0x5c, 0x10, 0x12, 0xe2, 0x15, 0x38, 0xf1,
	0x46, 0x3d, 0x22, 0x71, 0xe1, 0x48, 0x23, 0x1e, 0x04, 0x79, 0xbd, 0x8e, 0x37, 0xb1, 0x05, 0xed,
	0x29, 0xd9, 0x9d, 0x99, 0x6f, 0x67, 0xe6, 0xff, 0x65, 0xd8, 0xef, 0x53, 0xfe, 0x7e, 0xd8, 0xb3,
	0x5d, 0xe6, 0x77, 0x9c, 0x5e, 0xc4, 0x02, 0x27, 0xe8, 0x70, 0xe6, 0xb1, 0xc7, 0xfd, 0x28, 0x74,
	0x3b, 0x4e, 0x48, 0xc5, 0xa9, 0x33, 0xda, 0x15, 0xbf, 0x76, 0x18, 0x31, 0xce, 0x70, 0x51, 0xfc,
	0x1f, 0xed, 0x1a, 0x9b, 0x7d, 0xc6, 0xfa, 0x03, 0x22, 0xf2, 0x9c, 0x20, 0x60, 0xdc, 0xe1, 0x94,
	0x05, 0x71, 0x9a, 0x66, 0xdc, 0x97, 0x51, 0x71, 0xea, 0x0d, 0xdf, 0x75, 0x38, 0xf5, 0x49, 0xcc,
	0x1d, 0x3f, 0x4c, 0x13, 0xac, 0xb1, 0x06, 0xd5, 0x33, 0xe6, 0x31, 0x5c, 0x81, 0x0a, 0xf5, 0x74,
	0xad, 0xad, 0x6d, 0xd7, 0xbb, 0x15, 0xea, 0x61, 0x0b, 0x6a, 0x9c, 0xf2, 0x01, 0xd1, 0x2b, 0xe2,
	0x2a, 0x3d, 0x60, 0x1b, 0x1a, 0x1e, 0x89, 0xdd, 0x88, 0x86, 0xc9, 0x2b, 0xfa, 0xbc, 0x88, 0xa9,
	0x57, 0xb8, 0x09, 0x75, 0x97, 0xf9, 0xe1, 0x80, 0x70, 0xe2, 0xe9, 0xd5, 0xb6, 0xb6, 0xbd, 0xd4,
	0xcd, 0x2f, 0xf0, 0x00, 0xc0, 0x8d, 0x88, 0xc3, 0x89, 0x77, 0xe1, 0x70, 0xbd, 0xd6, 0xd6, 0xb6,
	0x1b, 0x7b, 0x86, 0x9d, 0x36, 0x69, 0x67, 0x4d, 0xda, 0x67, 0x59, 0x93, 0xdd, 0xba, 0xcc, 0x3e,
	0xe2, 0x49, 0xe9, 0x30, 0xf4, 0xb2, 0xd2, 0x85, 0xff, 0x97, 0xca, 0xec, 0x23, 0x6e, 0x3d, 0x85,
	0xb5, 0x63, 0xc1, 0x49, 0x26, 0xed, 0x92, 0x8f, 0x43, 0x12, 0x73, 0x7c, 0x00, 0x55, 0xca, 0x89,
	0x2f, 0x46, 0x6e, 0xec, 0x2d, 0xdb, 0x72, 0xa1, 0xb6, 0xc8, 0x11, 0x21, 0xeb, 0x21, 0xa0, 0x5a,
	0x17, 0x87, 0x2c, 0x88, 0xc9, 0xec, 0xa6, 0xac, 0x03, 0x35, 0x2b, 0xce, 0xf0, 0x5b, 0x50, 0x4b,
	0x18, 0xb1, 0xae, 0xb5, 0xe7, 0x8b, 0xfc, 0x34, 0x66, 0x3d, 0x82, 0xf5, 0xa9, 0x52, 0xf9, 0x42,
	0x13, 0xe6, 0xa9, 0x97, 0x56, 0xd6, 0xbb, 0xc9, 0x5f, 0xab, 0x0d, 0x2b, 0x2f, 0x09, 0x57, 0xdb,
	0x9f, 0xed, 0xe2, 0x09, 0xac, 0x4e, 0x32, 0x24, 0xe6, 0x1a, 0x13, 0x9e, 0xc0, 0xea, 0x09, 0x8d,
	0xa7, 0xc0, 0x2d, 0xa8, 0x0d, 0xa8, 0x4f, 0xb9, 0x28, 0xab, 0x75, 0xd3, 0x03, 0x6e, 0xc1, 0x72,
	0xc0, 0xf8, 0x45, 0x2e, 0x6d, 0x45, 0x48, 0x7b, 0x2b, 0x60, 0xfc, 0x38, 0xbb, 0xb3, 0x9e, 0x41,
	0x33, 0xa7, 0xc9, 0x26, 0xae, 0xb5, 0x87, 0x2d, 0x58, 0x7b, 0x41, 0x12, 0xc6, 0xbf, 0x26, 0x6c,
	0x01, 0xaa, 0x49, 0x29, 0x3f, 0xd1, 0xf6, 0xb5, 0x10, 0xfa, 0x86, 0xda, 0xb6, 0x00, 0xd5, 0x3a,
	0x49, 0x3b, 0x50, 0x6f, 0x6f, 0xa6, 0xe5, 0x06, 0xac, 0x4f, 0x95, 0xa6, 0xc4, 0xbd, 0xef, 0x35,
	0x68, 0x24, 0x37, 0xa7, 0x24, 0x1a, 0x51, 0x97, 0xe0, 0x39, 0x40, 0x2e, 0x39, 0x1a, 0x13, 0x54,
	0xc1, 0xa0, 0xc6, 0xbd, 0xd2, 0x98, 0x6c, 0xf4, 0xf6, 0xd7, 0x9f, 0x7f, 0xbe, 0x55, 0x9a, 0xd6,
	0x52, 0xf6, 0x5d, 0x38, 0x14, 0x63, 0x61, 0x0f, 0x1a, 0x8a, 0xa3, 0xb0, 0x8c, 0x91, 0x8d, 0x65,
	0x6c, 0x96, 0x07, 0xe5, 0x0b, 0xba, 0x78, 0x01, 0xad, 0xe5, 0xec, 0x85, 0x4e, 0x6f, 0x38, 0xf8,
	0x70, 0xa8, 0xed, 0xe0, 0x29, 0x2c, 0x4a, 0xab, 0xe1, 0x9d, 0x09, 0x62, 0xda, 0x9e, 0x86, 0x5e,
	0x0c, 0x48, 0xee, 0x86, 0xe0, 0xae, 0x62, 0xce, 0xfd, 0x44, 0xbd, 0xcf, 0xf8, 0x0a, 0x96, 0x32,
	0xef, 0x60, 0x5e, 0x3c, 0x63, 0x4e, 0xe3, 0x6e, 0x49, 0x44, 0x72, 0x9b, 0x82, 0x0b, 0x38, 0xd9,
	0x08, 0xbe, 0x05, 0xc8, 0x0d, 0xa3, 0xac, 0xba, 0x60, 0x35, 0x65, 0xd5, 0x25, 0x0e, 0x93, 0x0d,
	0xef, 0xcc, 0x34, 0x7c, 0x0e, 0x90, 0xeb, 0xad, 0xd0, 0x0b, 0x6e, 0x54, 0xe8, 0x25, 0x8e, 0x93,
	0x42, 0x1a, 0x25, 0x42, 0x2a, 0x76, 0xc2, 0x32, 0x46, 0x89, 0x90, 0x25, 0x0e, 0xcc, 0x84, 0x34,
	0x0a, 0x42, 0x3e, 0x37, 0x2f, 0xaf, 0xcc, 0xb9, 0x5f, 0x57, 0xe6, 0xdc, 0x97, 0xb1, 0xa9, 0x5d,
	0x8e, 0x4d, 0xed, 0xc7, 0xd8, 0xd4, 0x7e, 0x8f, 0x4d, 0xed, 0x4d, 0x35, 0xc9, 0xeb, 0x2d, 0x88,
	0xcf, 0xea, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xf8, 0x8d, 0x2e, 0xa2, 0x06, 0x00,
	0x00,
}
